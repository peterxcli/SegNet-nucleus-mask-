from torch import nn

class DeconvNet(nn.Module):
    def __init__(self):
        super(DeconvNet, self).__init__()

        self.conv1 = nn.Conv2d(1, 64, kernel_size=3, padding=1)
        self.relu = nn.ReLU()
        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, padding=1)
        self.mp = nn.MaxPool2d(2,return_indices=True)
        self.up = nn.MaxUnpool2d(2)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.conv4 = nn.Conv2d(128, 128, kernel_size=3, padding=1)
        self.conv5 = nn.Conv2d(128, 256, kernel_size=3, padding=1)
        self.conv6 = nn.Conv2d(256, 256, kernel_size=3, padding=1)
        self.conv7 = nn.Conv2d(256, 512, kernel_size=3, padding=1)
        self.conv8 = nn.Conv2d(512, 512, kernel_size=3, padding=1)
        self.conv9 = nn.Conv2d(512, 1024, kernel_size=7, padding=0)
        self.deconv0 = nn.ConvTranspose2d(1024, 512, kernel_size=7, padding=0)
        self.deconv1 = nn.ConvTranspose2d(512, 512, kernel_size=3, padding=1)
        self.deconv2 = nn.ConvTranspose2d(512, 256, kernel_size=3, padding=1)
        self.deconv3 = nn.ConvTranspose2d(256, 256, kernel_size=3, padding=1)
        self.deconv4 = nn.ConvTranspose2d(256, 128, kernel_size=3, padding=1)
        self.deconv5 = nn.ConvTranspose2d(128, 128, kernel_size=3, padding=1)
        self.deconv6 = nn.ConvTranspose2d(128, 64, kernel_size=3, padding=1)
        self.deconv7 = nn.ConvTranspose2d(64, 64, kernel_size=3, padding=1)
        self.deconv8 = nn.ConvTranspose2d(64, 1, kernel_size=3, padding=1)
        self.sig = nn.Sigmoid()
        self.bn1 = nn.BatchNorm2d(1)
        self.bn64 = nn.BatchNorm2d(64)
        self.bn128 = nn.BatchNorm2d(128)
        self.bn256 = nn.BatchNorm2d(256)
        self.bn512 = nn.BatchNorm2d(512)

    def forward(self, x):
        #print(x.shape)
        x = self.conv1(x)
        x = self.bn64(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.bn64(x)
        x = self.relu(x)
        x,i1 = self.mp(x)
        #print(x.shape)
        x = self.conv3(x)
        x = self.bn128(x)
        x = self.relu(x)
        x = self.conv4(x)
        x = self.bn128(x)
        x = self.relu(x)
        x,i2 = self.mp(x)
        #print(x.shape)
        x = self.conv5(x)
        x = self.bn256(x)
        x = self.relu(x)
        x = self.conv6(x)
        x = self.bn256(x)
        x = self.relu(x)
        x = self.conv6(x)
        x = self.bn256(x)
        x = self.relu(x)
        x,i3 = self.mp(x)
        #print(x.shape)
        x = self.conv7(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.conv8(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.conv8(x)
        x = self.bn512(x)
        x = self.relu(x)
        x,i4 = self.mp(x)
        #print(x.shape)
        x = self.conv8(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.conv8(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.conv8(x)
        x = self.bn512(x)
        x = self.relu(x)
        x,i5 = self.mp(x)
        #print(x.shape)
        x = self.conv9(x)
        x = self.relu(x)
        #print(x.shape)
        x = self.deconv0(x)
        x = self.relu(x)
        #print(x.shape)
        x = self.up(x,i5)
        x = self.deconv1(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.deconv1(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.deconv1(x)
        x = self.bn512(x)
        x = self.relu(x)
        #print(x.shape)
        x = self.up(x,i4)
        x = self.deconv1(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.deconv1(x)
        x = self.bn512(x)
        x = self.relu(x)
        x = self.deconv2(x)
        x = self.bn256(x)
        x = self.relu(x)
        #print(x.shape)
        x = self.up(x,i3)
        x = self.deconv3(x)
        x = self.bn256(x)
        x = self.relu(x)
        x = self.deconv3(x)
        x = self.bn256(x)
        x = self.relu(x)
        x = self.deconv4(x)
        x = self.bn128(x)
        x = self.relu(x)
        #print(x.shape)
        x = self.up(x,i2)
        x = self.deconv5(x)
        x = self.bn128(x)
        x = self.relu(x)
        x = self.deconv6(x)
        x = self.bn64(x)
        x = self.relu(x)
        #print(x.shape)
        x = self.up(x,i1)
        x = self.deconv7(x)
        x = self.bn64(x)
        x = self.relu(x)
        x = self.deconv8(x)
        x = self.bn1(x)
        x = self.sig(x)
        #print(x.shape)

        return x